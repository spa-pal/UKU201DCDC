<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [E:\Users\Pal\DEVICES\UKU201DCDC\SOFT\1\1.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image E:\Users\Pal\DEVICES\UKU201DCDC\SOFT\1\1.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 4.1 [Build 644]: Last Updated: Fri Jan 22 12:24:17 2021
<BR><P>
<H3>Maximum Stack Usage =       2644 bytes + Unknown(Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; modbus_in &rArr; modbus_hold_registers_transmit &rArr; CRC16_2
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[1f]">CAN_RX1_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[20]">CAN_SCE_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[15]">DMAChannel1_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[16]">DMAChannel2_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[17]">DMAChannel3_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[18]">DMAChannel4_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[19]">DMAChannel5_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[1a]">DMAChannel6_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[1b]">DMAChannel7_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from main.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from uart1.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from uart2.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN_TX_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN_RX0_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[36]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from stm32f10x.o(.text)
 <LI><a href="#[37]">fputc</a> from main.o(.text) referenced from printf6.o(i.__0printf$6)
 <LI><a href="#[35]">main</a> from main.o(.text) referenced from entry7.o(.ARM.Collect$$$$00000007)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[36]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(.text)
</UL>
<P><STRONG><a name="[c0]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[38]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[8f]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[c1]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7.o(.ARM.Collect$$$$00000007))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMAChannel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMAChannel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMAChannel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMAChannel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMAChannel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMAChannel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMAChannel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>stm32_Init</STRONG> (Thumb, 264 bytes, Stack size 8 bytes, stm32_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stm32_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_RtcSetup
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_UsartSetup
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3d]"></a>sendchar</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sendchar
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar2
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[37]"></a>fputc</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fputc &rArr; sendchar
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf6.o(i.__0printf$6)
</UL>
<P><STRONG><a name="[55]"></a>calendar_hndl</STRONG> (Thumb, 344 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3f]"></a>factory_settings_hndl</STRONG> (Thumb, 316 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = factory_settings_hndl &rArr; lc640_write_int &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[41]"></a>log_hndl</STRONG> (Thumb, 694 bytes, Stack size 48 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = log_hndl &rArr; avar_unet_hndl &rArr; lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long_ptr
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_unet_hndl
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_in
</UL>

<P><STRONG><a name="[46]"></a>kalibrate_func</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = kalibrate_func &rArr; lc640_write_int &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_in
</UL>

<P><STRONG><a name="[47]"></a>net_drv</STRONG> (Thumb, 850 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = net_drv &rArr; avar_bps_hndl &rArr; lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_find_unvol
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp2515_transmit
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_bps_hndl
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 446 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2628<LI>Call Chain = SysTick_Handler &rArr; modbus_in &rArr; modbus_hold_registers_transmit &rArr; CRC16_2
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_in
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_drv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>main</STRONG> (Thumb, 788 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2644<LI>Call Chain = main &rArr; modbus_in &rArr; modbus_hold_registers_transmit &rArr; CRC16_2
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unet_drv
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_hndl
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_Usart1Setup
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2_config
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speedChargeHndl
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rele_hndl
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rele_drv
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outVoltRegHndl
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num_necc_hndl
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_in
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_hndl
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_read
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_first_init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp2515_transmit
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matemat
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_hndl
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_drv
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kb_init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kb_hndl
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmi_cntrl_hndl
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_drv
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cntrl_hndl
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_mcp2515_init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_mcp2515_hndl
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_in_an1
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bps_hndl
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bps_drv
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_hndl
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avt_klbr_hndl_
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avg_hndl
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_drv
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_drv
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_settings_hndl
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_hndl
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_Init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry7.o(.ARM.Collect$$$$00000007)
</UL>
<P><STRONG><a name="[6f]"></a>spi2</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, 25lc640.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long_ptr
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_rdsr
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_wren
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long_ptr
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp2515_rts
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp2515_read_status
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp2515_bit_modify
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp2515_read
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp2515_write
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp2515_reset
</UL>

<P><STRONG><a name="[4d]"></a>spi2_config</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, 25lc640.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long_ptr
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_rdsr
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_wren
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long_ptr
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp2515_rts
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp2515_read_status
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp2515_bit_modify
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp2515_read
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp2515_write
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp2515_reset
</UL>

<P><STRONG><a name="[70]"></a>spi2_unconfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, 25lc640.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long_ptr
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_rdsr
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_wren
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long_ptr
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
</UL>

<P><STRONG><a name="[6e]"></a>lc640_wren</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, 25lc640.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lc640_wren
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2_unconfig
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2_config
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long_ptr
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write
</UL>

<P><STRONG><a name="[71]"></a>lc640_rdsr</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, 25lc640.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2_unconfig
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2_config
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long_ptr
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long_ptr
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
</UL>

<P><STRONG><a name="[42]"></a>lc640_read_int</STRONG> (Thumb, 122 bytes, Stack size 12 bytes, 25lc640.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lc640_read_int &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_rdsr
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2_unconfig
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2_config
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_read
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_first_init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_unet_hndl
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_bps_hndl
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalibrate_func
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hndl
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speedz_mem_hndl
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_bat_ips_hndl
</UL>

<P><STRONG><a name="[72]"></a>lc640_read_long</STRONG> (Thumb, 166 bytes, Stack size 20 bytes, 25lc640.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lc640_read_long &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_rdsr
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2_unconfig
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2_config
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_in
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_read
</UL>

<P><STRONG><a name="[43]"></a>lc640_read_long_ptr</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, 25lc640.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lc640_read_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_rdsr
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2_unconfig
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2_config
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_unet_hndl
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_bps_hndl
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hndl
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speedz_mem_hndl
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_bat_ips_hndl
</UL>

<P><STRONG><a name="[44]"></a>lc640_write</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, 25lc640.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lc640_write &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_rdsr
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_wren
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2_unconfig
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2_config
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hndl
</UL>

<P><STRONG><a name="[40]"></a>lc640_write_int</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, 25lc640.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lc640_write_int &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_rdsr
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_wren
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2_unconfig
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2_config
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_in
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_first_init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_unet_hndl
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_bps_hndl
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalibrate_func
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_settings_hndl
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speedz_mem_hndl
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_bat_ips_hndl
</UL>

<P><STRONG><a name="[73]"></a>lc640_write_long</STRONG> (Thumb, 182 bytes, Stack size 12 bytes, 25lc640.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lc640_write_long &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_rdsr
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_wren
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2_unconfig
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2_config
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_in
</UL>

<P><STRONG><a name="[74]"></a>lc640_write_long_ptr</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, 25lc640.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_rdsr
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_wren
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2_unconfig
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2_config
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_unet_hndl
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_bps_hndl
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speedz_mem_hndl
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_bat_ips_hndl
</UL>

<P><STRONG><a name="[4f]"></a>memo_first_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, memo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = memo_first_init &rArr; lc640_write_int &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[50]"></a>memo_read</STRONG> (Thumb, 3494 bytes, Stack size 8 bytes, memo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = memo_read &rArr; lc640_read_long &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gran
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[75]"></a>gran</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gran.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outVoltRegHndl
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num_necc_hndl
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_in
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_read
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cntrl_hndl
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bps_hndl
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bps_drv
</UL>

<P><STRONG><a name="[6a]"></a>avg_hndl</STRONG> (Thumb, 722 bytes, Stack size 0 bytes, control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5c]"></a>led_hndl</STRONG> (Thumb, 822 bytes, Stack size 0 bytes, control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5d]"></a>led_drv</STRONG> (Thumb, 274 bytes, Stack size 0 bytes, control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[57]"></a>adc_drv</STRONG> (Thumb, 378 bytes, Stack size 12 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = adc_drv
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[52]"></a>adc_init</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8b]"></a>avt_klbr_start_ui</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_in
</UL>

<P><STRONG><a name="[8c]"></a>avt_klbr_start_un</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_in
</UL>

<P><STRONG><a name="[8d]"></a>avt_klbr_start_i</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_in
</UL>

<P><STRONG><a name="[8e]"></a>avt_klbr_start_t</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_in
</UL>

<P><STRONG><a name="[65]"></a>avt_klbr_hndl_</STRONG> (Thumb, 2262 bytes, Stack size 24 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = avt_klbr_hndl_ &rArr; mcp2515_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp2515_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[76]"></a>apv_start</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bps_drv
</UL>

<P><STRONG><a name="[64]"></a>matemat</STRONG> (Thumb, 1206 bytes, Stack size 12 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = matemat
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5b]"></a>bps_hndl</STRONG> (Thumb, 1166 bytes, Stack size 16 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bps_hndl
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gran
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_find_unvol
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5a]"></a>bps_drv</STRONG> (Thumb, 1926 bytes, Stack size 16 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = bps_drv &rArr; avar_bps_hndl &rArr; lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gran
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_bps_hndl
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apv_start
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66]"></a>num_necc_hndl</STRONG> (Thumb, 336 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = num_necc_hndl
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gran
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[62]"></a>unet_drv</STRONG> (Thumb, 430 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = unet_drv &rArr; avar_unet_hndl &rArr; lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_unet_hndl
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[79]"></a>show_mess</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = show_mess
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speedChargeHndl
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speedChargeStartStop
</UL>

<P><STRONG><a name="[58]"></a>ext_drv</STRONG> (Thumb, 394 bytes, Stack size 0 bytes, control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[63]"></a>hmi_cntrl_hndl</STRONG> (Thumb, 304 bytes, Stack size 0 bytes, control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>speedChargeStartStop</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = speedChargeStartStop &rArr; speedz_mem_hndl &rArr; lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speedz_mem_hndl
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_mess
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speedChargeHndl
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_in
</UL>

<P><STRONG><a name="[68]"></a>outVoltRegHndl</STRONG> (Thumb, 926 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = outVoltRegHndl &rArr; mess_send
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gran
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_find_unvol
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_send
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>speedChargeHndl</STRONG> (Thumb, 564 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = speedChargeHndl &rArr; speedChargeStartStop &rArr; speedz_mem_hndl &rArr; lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speedz_mem_hndl
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speedChargeStartStop
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_mess
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[60]"></a>tst_hndl</STRONG> (Thumb, 1202 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tst_hndl &rArr; mess_send
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_send
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5f]"></a>rele_drv</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5e]"></a>rele_hndl</STRONG> (Thumb, 340 bytes, Stack size 12 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rele_hndl
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[59]"></a>cntrl_hndl</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cntrl_hndl
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gran
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[54]"></a>kb_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[67]"></a>kb_hndl</STRONG> (Thumb, 926 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = kb_hndl &rArr; avar_bat_ips_hndl &rArr; lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_send
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_find
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_bat_ips_hndl
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[61]"></a>mess_hndl</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, mess.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7a]"></a>mess_send</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, mess.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mess_send
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_hndl
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outVoltRegHndl
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kb_hndl
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_hndl
</UL>

<P><STRONG><a name="[7c]"></a>mess_find</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, mess.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kb_hndl
</UL>

<P><STRONG><a name="[48]"></a>mess_find_unvol</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, mess.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outVoltRegHndl
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bps_hndl
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_drv
</UL>

<P><STRONG><a name="[7d]"></a>mcp2515_reset</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, mcp2515.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mcp2515_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2_config
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_mcp2515_init
</UL>

<P><STRONG><a name="[7e]"></a>mcp2515_write</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, mcp2515.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mcp2515_write
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2_config
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_mcp2515_init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_mcp2515_hndl
</UL>

<P><STRONG><a name="[7f]"></a>mcp2515_read</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, mcp2515.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mcp2515_read
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2_config
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_mcp2515_init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_mcp2515_hndl
</UL>

<P><STRONG><a name="[80]"></a>mcp2515_bit_modify</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, mcp2515.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mcp2515_bit_modify
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2_config
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_mcp2515_init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_mcp2515_hndl
</UL>

<P><STRONG><a name="[81]"></a>mcp2515_read_status</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, mcp2515.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mcp2515_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2_config
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_mcp2515_hndl
</UL>

<P><STRONG><a name="[82]"></a>mcp2515_rts</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, mcp2515.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mcp2515_rts
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2_config
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_mcp2515_hndl
</UL>

<P><STRONG><a name="[53]"></a>can_mcp2515_init</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, mcp2515.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = can_mcp2515_init &rArr; mcp2515_bit_modify
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp2515_bit_modify
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp2515_read
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp2515_write
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp2515_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[49]"></a>mcp2515_transmit</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, mcp2515.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mcp2515_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_in
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avt_klbr_hndl_
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_drv
</UL>

<P><STRONG><a name="[56]"></a>can_mcp2515_hndl</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, mcp2515.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = can_mcp2515_hndl &rArr; mcp2515_bit_modify
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp2515_rts
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp2515_read_status
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp2515_bit_modify
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp2515_read
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp2515_write
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[45]"></a>avar_unet_hndl</STRONG> (Thumb, 1208 bytes, Stack size 48 bytes, avar_hndl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = avar_unet_hndl &rArr; lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long_ptr
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long_ptr
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unet_drv
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hndl
</UL>

<P><STRONG><a name="[4a]"></a>avar_bps_hndl</STRONG> (Thumb, 1204 bytes, Stack size 56 bytes, avar_hndl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = avar_bps_hndl &rArr; lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long_ptr
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long_ptr
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_in_an1
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bps_drv
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_drv
</UL>

<P><STRONG><a name="[7b]"></a>avar_bat_ips_hndl</STRONG> (Thumb, 812 bytes, Stack size 48 bytes, avar_hndl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = avar_bat_ips_hndl &rArr; lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long_ptr
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long_ptr
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kb_hndl
</UL>

<P><STRONG><a name="[78]"></a>speedz_mem_hndl</STRONG> (Thumb, 1148 bytes, Stack size 48 bytes, avar_hndl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = speedz_mem_hndl &rArr; lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long_ptr
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long_ptr
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speedChargeHndl
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speedChargeStartStop
</UL>

<P><STRONG><a name="[4b]"></a>beep_drv</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, beep.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[83]"></a>beep_init</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, beep.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_hndl
</UL>

<P><STRONG><a name="[6b]"></a>beep_hndl</STRONG> (Thumb, 290 bytes, Stack size 8 bytes, beep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = beep_hndl &rArr; mess_send
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_send
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4e]"></a>rtc_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[51]"></a>stm32_Usart1Setup</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stm32_Usart1Setup
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_in
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[89]"></a>crc_87</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = crc_87
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_in
</UL>

<P><STRONG><a name="[8a]"></a>crc_95</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = crc_95
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_in
</UL>

<P><STRONG><a name="[87]"></a>putchar1</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, uart1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_in
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_hold_registers_transmit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_input_registers_transmit
</UL>

<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 218 bytes, Stack size 0 bytes, uart1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>putchar2</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, uart2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>

<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 230 bytes, Stack size 0 bytes, uart2.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>CRC16_2</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CRC16_2
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_in
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_hold_registers_transmit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_input_registers_transmit
</UL>

<P><STRONG><a name="[84]"></a>modbus_input_registers_transmit</STRONG> (Thumb, 3244 bytes, Stack size 2256 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2268<LI>Call Chain = modbus_input_registers_transmit &rArr; CRC16_2
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16_2
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar1
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_in
</UL>

<P><STRONG><a name="[88]"></a>modbus_hold_registers_transmit</STRONG> (Thumb, 3294 bytes, Stack size 2536 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2548<LI>Call Chain = modbus_hold_registers_transmit &rArr; CRC16_2
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16_2
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar1
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_in
</UL>

<P><STRONG><a name="[4c]"></a>modbus_in</STRONG> (Thumb, 5830 bytes, Stack size 72 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2620<LI>Call Chain = modbus_in &rArr; modbus_hold_registers_transmit &rArr; CRC16_2
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gran
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_Usart1Setup
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcp2515_transmit
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalibrate_func
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hndl
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_hold_registers_transmit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_input_registers_transmit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16_2
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar1
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_95
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_87
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speedChargeStartStop
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avt_klbr_start_t
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avt_klbr_start_i
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avt_klbr_start_un
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avt_klbr_start_ui
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[6d]"></a>can_in_an1</STRONG> (Thumb, 790 bytes, Stack size 8 bytes, full_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = can_in_an1 &rArr; avar_bps_hndl &rArr; lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_bps_hndl
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[85]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_in
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_hold_registers_transmit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_input_registers_transmit
</UL>

<P><STRONG><a name="[c2]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[39]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[c5]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>__0printf$6</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf6.o(i.__0printf$6), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[c8]"></a>__1printf$6</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0printf$6), UNUSED)

<P><STRONG><a name="[69]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0printf$6))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_in
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c9]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[ca]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[cb]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[3c]"></a>stm32_UsartSetup</STRONG> (Thumb, 420 bytes, Stack size 0 bytes, stm32_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_Init
</UL>

<P><STRONG><a name="[3b]"></a>stm32_RtcSetup</STRONG> (Thumb, 160 bytes, Stack size 0 bytes, stm32_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_Init
</UL>

<P><STRONG><a name="[91]"></a>_printf_core</STRONG> (Thumb, 818 bytes, Stack size 104 bytes, printf6.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$6
</UL>

<P><STRONG><a name="[94]"></a>_printf_post_padding</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, printf6.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[92]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf6.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
